////////////////////////////////////////////////////////////
// extendinding a placeholder for BEM                     //
// @param {String} $placeholder  name of placeholder      //
// @param {String} $block        name of the class        //
// @param {$map}   $elements     array of elements        //
// @param {$map}   $modifiers    array of modifers        //
////////////////////////////////////////////////////////////
@mixin bem($placeholder: null, $block: null, $elements: null, $modifiers: null) {

  @if $block == null {
    @error "Sorry there is no class to extend the `%#{$placeholder}` placeholder";
  }

  @if $placeholder == null {
    @error "Sorry there is no placeholder to be extended for `.#{$block}` class!!";
  }

  .#{$block} {
    @extend %#{$placeholder};
  }

  @if $elements != null {
    @each $element in $elements {
      .#{$block}__#{$element} {
        @extend %#{$placeholder}__#{$element};
      }
    }
  }

  @if $modifiers != null {
    @each $modifier in $modifiers {
      .#{$block}--#{$modifier} {
        @extend %#{$placeholder}--#{$modifier};
      }
    }
  }
}


///////////////////////////////////////////////////////////
// generate material box shadow with different colors and
// and shades.
// @param {color} $clr default rgb black
// @param {number} $a1 alpha of the first layer of the shadow default .2
// @param {number} $a2 alpha of the second layer of the shadow default .14
// @param {number} $a3 alpha of the third layer of the shadow default .12
///////////////////////////////////////////////////////////
@mixin card-shadow($clr: rgb(0, 0, 0), $a1: .2, $a2: .14, $a3: .12) {
  box-shadow: 0 3px 1px -2px rgba($clr, $a1),
              0 2px 2px 0 rgba($clr, $a2),
              0 1px 5px 0 rgba($clr, $a3);
}


///////////////////////////////////////////////////////////
// generate material box huge shadow with different colors and
// and shades.
// @param {color} $clr default rgb black
// @param {number} $a1 alpha of the first layer of the shadow default 0.05
// @param {number} $a2 alpha of the second layer of the shadow default .08
// @param {number} $a3 alpha of the third layer of the shadow default .03
// @param {boolean} $strict if should use important flag.
// @param {string} $depth whether the depth of shadow is very huge or normal
///////////////////////////////////////////////////////////
@mixin huge-shadow($clr: rgb(0, 0, 0), $a1: .05, $a2: .08, $a3: .03, $strict: null, $depth: normal) {
  $important: '';
  $shadow1: '0 8px 16px -3px #{rgba($clr, $a3)}, ';
  $shadow2: '0 12px 24px -6px #{rgba($clr, $a1)}, ';
  $shadow3: '0 32px 60px -16px #{rgba($clr, $a2)}';

  $shadow4: '0 16px 32px -6px #{rgba($clr, $a3)}, ';
  $shadow5: '0 32px 60px -16px #{rgba($clr, $a1)}, ';
  $shadow6: '0 72px 100px -32px #{rgba($clr, $a2)}';


  @if ($strict) { $important: '!important'}

  @if ($depth == normal) {
    box-shadow: unquote($shadow1 + $shadow2 + $shadow3 + $important);
  } @else {
    box-shadow: unquote($shadow4 + $shadow5 + $shadow6 + $important);
  }
}


///////////////////////////////////////////////////////////
// generate material box huge shadow with different colors and
// and shades only on y axis.
// @param {color} $clr default rgb black
// @param {number} $a1 alpha of the first layer of the shadow default 0.05
// @param {number} $a2 alpha of the second layer of the shadow default .08
// @param {number} $a3 alpha of the third layer of the shadow default .03
// @param {boolean} $strict if should use important flag.
///////////////////////////////////////////////////////////
@mixin huge-shadow-y($clr: rgb(0, 0, 0), $a1: .05, $a2: .08, $a3: .03, $strict: false) {
  @if ($strict) {
    box-shadow: 8px 8px 16px -3px rgba($clr, $a3),
                16px 16px 24px -6px rgba($clr, $a1),
                32px 32px 60px -16px rgba($clr, $a2) !important;
  } @else {
    box-shadow: 8px 8px 16px -3px rgba($clr, $a3),
                16px 16px 24px -6px rgba($clr, $a1),
                32px 32px 60px -16px rgba($clr, $a2);
  }
}


///////////////////////////////////////////////////////////
// generate styles of full width and height flex box.
// @param {string} $flex flex layout type
// @param {string} $align align items value
// @param {string} $justify justify content value
// @param {boolean} $limited if must take max width and max height
///////////////////////////////////////////////////////////
@mixin full-width-height-flex($flex: column, $align: center, $justify: center, $limited: false) {
  align-items: $align;
  justify-content: $justify;
  display: flex;
  flex-direction: $flex;
  min-height: 100%;
  min-width: 100%;

  @if ($limited == true) {
    height: 100%;
    width: 100%;
  }
}
